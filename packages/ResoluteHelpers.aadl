package ResoluteHelpers
public

	annex Resolute {**
		Req1(self : component) <= **"all threads have period"**
			let threads: {component} = collect_threads({self});
			forall(t : threads) .
				thread_has_period(t)
				
		thread_has_period(t : component) <= **"thread " t " has period"**
			has_property(t, Thread_Properties::Dispatch_Protocol)
			
		collect_threads(self : {component}) : {component} =
			{t for (c : self) (t : collect_thread(c))}
		
		collect_thread(self : component) : {component} =
			if self instanceof thread then
				union({self}, collect_threads(subcomponents(self)))
			else
				collect_threads(subcomponents(self))
				
		Req2(self : component) <= **"all devices with specify connected to type"**
			let devices: {component} = collect_devices({self});
			forall(d : devices) .
				device_has_must_be_connected_to(d)
		
		device_has_must_be_connected_to(d : component) <= **"device " d " has must be connected to"**
			has_property(d, Custom_Device_Properties::Must_Be_Connected_To)
		
		collect_devices(self : {component}) : {component} =
			{t for (c : self) (t : collect_device(c))}
		
		collect_device(self : component) : {component} =
			if self instanceof device then
				union({self}, collect_devices(subcomponents(self)))
			else
				collect_devices(subcomponents(self))
		
		Req3(self : component) <= **"all devices with must be connected to type specified"**
			let devices: {component} = collect_devices({self});
			forall(d : devices) .
				device_is_connected_to(d, name(type(d)), property(d, Custom_Device_Properties::Must_Be_Connected_To))
		
		device_is_connected_to(d : component, d_name : string, t : string) <= **"device " d_name " is conntected to type " t**
			let my_connected_components : {component} = reachable({d});
			exists(c : my_connected_components) .
				t = name(type(c))
			
		reachable(c : {component}) : {component} =
			let next : {component} = union(c, next_reachable(c));
			if c = next then 
				c
			else
				reachable(next)
			
		next_reachable(c : {component}) : {component} = 
			{y for (x : c) (y : reachable_components(x))}
			
		reachable_components(c : component) : {component} = 
			{y for (conn : connections(c)) (y : components_on_connection(c, conn))}
			
		components_on_connection(c : component, conn : connection) : {component} = 
			if is_port_connection(conn) then
				if source_component(conn) = c then
					{destination_component(conn)}
				else
					{}
			else
				{}
			
	**};
	
end ResoluteHelpers;