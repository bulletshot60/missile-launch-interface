package MissileLaunchInterfaceSystem
public
	with EventHandler, TimerSystem, LaunchDecider, Devices, Base_Types;

	processor embedded_cpu
		properties
			Scheduling_Protocol => (Static);
	end embedded_cpu;
	
	processor timing_cpu extends embedded_cpu
		features
			socket: requires bus access can;
	end timing_cpu;
	
	processor event_cpu extends embedded_cpu
		features
			socket: requires bus access can;
	end event_cpu;
	
	processor launch_decider_cpu extends embedded_cpu
		features
			socket: requires bus access can;
	end launch_decider_cpu;
	
	bus can
	end can;

	system missile_launch_interface
		features
			launch_missile: out data port Base_Types::Boolean;
		annex agree {**
			guarantee "will launch or not launch missile": launch_missile = true or launch_missile = false;
		**};
	end missile_launch_interface;
	
	system implementation missile_launch_interface.impl
		subcomponents
			timer_handler: system TimerSystem::external_timer.impl;
			event_handler: system EventHandler::event_handler.impl;
			launch_decider: system LaunchDecider::launch_decider.impl;
			left_toggle: device Devices::toggle_switch.impl;
			left_button: device Devices::button.impl;
			right_button: device Devices::button.impl;
			right_toggle: device Devices::toggle_switch.impl;
			timer: device Devices::timer.impl;
			
			timing_cpu: processor timing_cpu;
			event_cpu: processor event_cpu;
			launch_decider_cpu: processor launch_decider_cpu; 
			
			can_bus: bus can; 
		connections
			event1: port timer.fire->timer_handler.time_interrupt;
			event2: port left_toggle.toggled_up->event_handler.left_toggle_up;
			event3: port left_toggle.toggled_down->event_handler.left_toggle_down;
			event4: port left_button.pressed->event_handler.left_button_down;
			event5: port left_button.released->event_handler.left_button_up;
			event6: port right_button.pressed->event_handler.right_button_down;
			event7: port right_button.released->event_handler.right_button_up;
			event8: port right_toggle.toggled_up->event_handler.right_toggle_up;
			event9: port right_toggle.toggled_down->event_handler.right_toggle_down;
			connection1: port timer_handler.time_out->event_handler.time_in;
			connection2: port event_handler.left_toggle_enabled->launch_decider.left_toggle_enabled;
			connection3: port event_handler.left_toggle_enabled_at->launch_decider.left_toggle_enabled_at;
			connection4: port event_handler.left_button_enabled->launch_decider.left_button_enabled;
			connection5: port event_handler.left_button_enabled_at->launch_decider.left_button_enabled_at;
			connection6: port event_handler.right_button_enabled->launch_decider.right_button_enabled;
			connection7: port event_handler.right_button_enabled_at->launch_decider.right_button_enabled_at;
			connection8: port event_handler.right_toggle_enabled->launch_decider.right_toggle_enabled;
			connection9: port event_handler.right_toggle_enabled_at->launch_decider.right_toggle_enabled_at;
			output1: port launch_decider.launch->launch_missile;
			
			timing_connection: bus access timing_cpu.socket <-> can_bus;
			event_cpu_connection: bus access event_cpu.socket <-> can_bus;
			launch_decider_connection: bus access launch_decider_cpu.socket <-> can_bus;
		properties
			Actual_Processor_Binding => (reference (timing_cpu)) applies to timer_handler; 
			Actual_Processor_Binding => (reference (event_cpu)) applies to event_handler;
			Actual_Processor_Binding => (reference (launch_decider_cpu)) applies to launch_decider;
			
			Actual_Connection_Binding => (reference (can_bus)) applies to event1, event2, event3, event4, event5, event6, event7, event8, event9;
			Actual_Connection_Binding => (reference (can_bus)) applies to connection1, connection2, connection3, connection4, connection5, connection6, connection7, connection8, connection9;
			Actual_Connection_Binding => (reference (can_bus)) applies to output1;
		annex Resolute {**
			prove(Req1(this))
			prove(Req2(this))
		**};
	end missile_launch_interface.impl;
	
end MissileLaunchInterfaceSystem;